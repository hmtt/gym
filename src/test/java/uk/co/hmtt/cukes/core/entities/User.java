package uk.co.hmtt.cukes.core.entities;

import org.apache.commons.collections4.CollectionUtils;
import uk.co.hmtt.cukes.core.annotations.AutoGenerated;
import uk.co.hmtt.cukes.core.annotations.Bind;
import uk.co.hmtt.cukes.core.annotations.Unique;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import static uk.co.hmtt.cukes.core.Constants.DEFAULT_EMAIL_ADDRESS;
import static uk.co.hmtt.cukes.core.Constants.DEFAULT_PASS_CODE;
import static uk.co.hmtt.cukes.core.entities.ExclusionEntity.buildExclusionEntity;
import static uk.co.hmtt.cukes.core.entities.UserActivityEntity.buildActivityEntity;
import static uk.co.hmtt.gym.app.utilities.CollectionsUtil.safeIterator;
import static java.util.Collections.singletonList;

public class User implements Entity<User> {

    @AutoGenerated
    private int id;
    @Bind
    @Unique
    private String email;
    @Bind
    @Unique
    private String passCode;
    @Bind
    private Date lastLoggedIn;
    @Bind
    private int failedToLogInCount;
    @Bind
    private boolean enabled;

    public static final String EMAIL = "email";
    public static final String ENABLED = "enabled";
    public static final String FAILED_TO_LOGIN_COUNT = "failedToLoginCount";
    public static final String ID = "id";
    public static final String LAST_LOGGED_IN = "lastLoggedIn";

    public static final String PASSCODE = "passcode";

    private static EntityDao entityDao;

    private List<ActivityEntity> scheduledActivities = new ArrayList<>();
    private List<ActivityEntity> bookedActivities = new ArrayList<>();

    public static void setEntityDao(EntityDao dao) {
        entityDao = dao;
    }

    public static User buildDefaultAuthorisedUser() {
        return new User()
                .withEmail(DEFAULT_EMAIL_ADDRESS)
                .withPassCode(DEFAULT_PASS_CODE)
                .withLastLoggedIn(new Date())
                .withFailedToLogInCount(0)
                .withEnabled(true);
    }

    @Override
    public User mapRow(ResultSet resultSet, int i) throws SQLException {
        return User.buildDefaultAuthorisedUser().
                withEmail(resultSet.getString(EMAIL)).
                withEnabled(resultSet.getBoolean(ENABLED)).
                withFailedToLogInCount(resultSet.getInt(FAILED_TO_LOGIN_COUNT)).
                withId(resultSet.getInt(ID)).
                withLastLoggedIn(resultSet.getTimestamp(LAST_LOGGED_IN)).
                withPassCode(resultSet.getString(PASSCODE));
    }

    @Override
    public String getTableName() {
        return EntityDao.TABLE_NAME.USER.toString();
    }

    @Override
    public User persist() {
        entityDao.insert(User.class, singletonList(this));
        for (ActivityEntity activity : safeIterator(scheduledActivities)) {
            entityDao.insert(ActivityEntity.class, singletonList(activity));
            entityDao.insert(UserActivityEntity.class, singletonList(buildActivityEntity(this.getId(), activity.getId())));
            for (ExclusionEntity exclusionEntity : safeIterator(activity.getExclusions())) {
                entityDao.insert(ExclusionEntity.class, singletonList(buildExclusionEntity().withActivityId(activity.getId()).withUserId(this.getId()).withExclusionDate(exclusionEntity.getExclusionDate())));
            }
        }
        return this;
    }

    public User withActivity(ActivityEntity activity) {
        this.scheduledActivities.add(activity);
        return this;
    }

    public int getId() {
        return id;
    }

    public User withId(int id) {
        this.id = id;
        return this;
    }

    public String getEmail() {
        return email;
    }

    public User withEmail(String email) {
        this.email = email;
        return this;
    }

    public String getPassCode() {
        return passCode;
    }

    public User withPassCode(String passCode) {
        this.passCode = passCode;
        return this;
    }

    public User withLastLoggedIn(Date lastLoggedIn) {
        this.lastLoggedIn = lastLoggedIn;
        return this;
    }

    public int getFailedToLogInCount() {
        return failedToLogInCount;
    }

    public User withFailedToLogInCount(int failedToLogInCount) {
        this.failedToLogInCount = failedToLogInCount;
        return this;
    }

    public boolean isEnabled() {
        return enabled;
    }

    public User withEnabled(boolean enabled) {
        this.enabled = enabled;
        return this;
    }

    public void setScheduledActivitiesActivities(List<ActivityEntity> activities) {
        this.scheduledActivities = activities;
    }

    public List<ActivityEntity> getScheduledActivitiesActivities() {
        return this.scheduledActivities;
    }

    public List<ActivityEntity> getBookedActivities() {
        return bookedActivities;
    }

    public void setBookedActivities(List<ActivityEntity> bookedActivities) {
        this.bookedActivities = bookedActivities;
    }
}
